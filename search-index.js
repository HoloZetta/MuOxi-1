var searchIndex={};
searchIndex["db"] = {"doc":"Diesel powered ORM management library for MuOxi uses…","i":[[3,"DatabaseHandler","db","Main database handler struct",null,null],[12,"handle","","acutal connection to postgres database",0,null],[12,"clients","","handle to the clients table",0,null],[0,"cache","","Wrapper around redis server to easy manipulate cached data",null,null],[3,"Cache","db::cache","main wrapper around redis::Connection",null,null],[12,"conn","","Raw connection to caching server",1,null],[7,"REDIS_SERVER","","default address for redis server",null,null],[11,"new_with_uri","","create new connection to cache server using custom uri",1,[[["str"]],["redisresult"]]],[11,"new","","create new connection to cache server using default uri",1,[[],["redisresult"]]],[0,"clients","db","Holds templates and query related functions about clients…",null,null],[3,"Client","db::clients","representation of raw socket for incoming connection",null,null],[12,"uid","","unique id for each client",2,null],[12,"ip","","ip address where client has connected from",2,null],[12,"port","","port where client has connected from",2,null],[3,"ClientHashMap","","Wrapper around client json representation object",null,null],[12,"0","","",3,null],[3,"ClientVector","","Wrapper around a vector of clients objects",null,null],[12,"0","","",4,null],[3,"ClientHandler","","Holds utilities to maniuplate the Client table in the…",null,null],[11,"new","","create new Client",2,[[["uid"],["string"],["i32"]],["self"]]],[11,"empty","","returns an empty initialized vector of clients",4,[[],["self"]]],[11,"len","","returns the length of current vector",4,[[["self"]],["usize"]]],[11,"upsert","","Attempts to insert a new client with UID, if there is a…",5,[[["pgconnection"],["client"],["self"]],[["queryresult",["client"]],["client"]]]],[11,"upsert_batch","","Attempts to insert a new client with UID, if there is a…",5,[[["pgconnection"],["self"],["clientvector"]],["queryresult"]]],[11,"remove_uid","","Permanently remove record from table, by UID",5,[[["pgconnection"],["uid"],["self"]],[["queryresult",["usize"]],["usize"]]]],[11,"remove_uids","","Remove a list of UIDS from db by suppling a vec of UIDs…",5,[[["pgconnection"],["vec",["uid"]],["uid"],["self"]],[["queryresult",["usize"]],["usize"]]]],[11,"uid_exists","","checks to see if UID of client exists within database",5,[[["pgconnection"],["uid"],["self"]],["bool"]]],[11,"get_uid","","Get single UID from db, if UID doesn't exist it will…",5,[[["pgconnection"],["uid"],["self"]],[["queryresult",["clientvector"]],["clientvector"]]]],[11,"get_uids","","Retrieve a list of UIDS from db by suppling a vec of UIDs…",5,[[["pgconnection"],["vec",["uid"]],["uid"],["self"]],[["queryresult",["clientvector"]],["clientvector"]]]],[11,"get_uids_range","","Get a range of UIDs Note that UIDS that do not exists will…",5,[[["pgconnection"],["uid"],["self"]],[["queryresult",["clientvector"]],["clientvector"]]]],[11,"get_ip_exact","","retrieve records with exact IP address",5,[[["pgconnection"],["str"],["self"]],[["queryresult",["clientvector"]],["clientvector"]]]],[11,"get_ip_like","","retrieve a vector of ip address with the appropriate match…",5,[[["pgconnection"],["self"],["string"]],[["queryresult",["clientvector"]],["clientvector"]]]],[0,"schema","db","",null,null],[0,"clients","db::schema","",null,null],[3,"table","db::schema::clients","The actual table struct",null,null],[0,"dsl","","Re-exports all of the columns of this table, as well as…",null,null],[0,"columns","","Contains all of the columns of this table",null,null],[3,"star","db::schema::clients::columns","Represents `table_name.*`, which is sometimes needed for…",null,null],[3,"uid","","",null,null],[3,"ip","","",null,null],[3,"port","","",null,null],[6,"SqlType","db::schema::clients","The SQL type of all of the columns on this table",null,null],[6,"BoxedQuery","","Helper type for representing a boxed query from this table",null,null],[17,"all_columns","","A tuple of all of the columns on this table",null,null],[11,"star","","Represents `table_name.*`, which is sometimes necessary…",6,[[["self"]],["star"]]],[0,"utils","db","Holds collections of regularly used functions that relate…",null,null],[5,"read_json_file","db::utils","Reads JSON file and convert to JSON::Value",null,[[["str"]],[["result",["value"]],["value"]]]],[5,"write_json_file","","Serializes and writes structure to JSON",null,[[["str"],["t"]],["result"]]],[5,"json_to_object","","Attempt converstion from JSON Value to Object T",null,[[["value"]],[["serialize"],["jsondecoderresult"],["deserializeowned"]]]],[5,"gen_uid","","Creates a unique 8 byte address first 4 bytes is timestamp…",null,[[],["uid"]]],[6,"UID","","unique id for each instance",null,null],[6,"JsonDecoderResult","","custom result for decoding json values",null,null],[11,"connect","db","creates a new instance of the handler and defaults to…",0,[[],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","db::cache","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","db::clients","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","db::schema::clients","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"filter","","",6,[[["predicate"]]]],[11,"group_by","","",6,[[["expr"]]]],[11,"join_target","","",6,[[["onclausewrapper"]]]],[11,"into_update_target","","",6,[[],["updatetarget"]]],[11,"select","","",6,[[["selection"]]]],[11,"internal_into_boxed","","",6,[[]]],[11,"as_query","","",6,[[]]],[11,"internal_load","","",6,[[["conn"]],[["result",["vec","error"]],["error"],["vec"]]]],[11,"find","","",6,[[["pk"]]]],[11,"or_filter","","",6,[[["predicate"]]]],[11,"limit","","",6,[[["i64"]]]],[11,"for_update","","",6,[[]]],[11,"with_lock","","",6,[[["lock"]]]],[11,"offset","","",6,[[["i64"]]]],[11,"order","","",6,[[["expr"]]]],[11,"then_order_by","","",6,[[["expr"]]]],[11,"distinct","","",6,[[]]],[11,"distinct_on","","",6,[[["selection"]]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","db::schema::clients::columns","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"execute","","",8,[[["conn"],["t"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"execute","","",9,[[["conn"],["t"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"execute","","",10,[[["conn"],["t"]],[["error"],["result",["usize","error"]],["usize"]]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","db::clients","",4,[[["clienthashmap"]],["self"]]],[11,"clone","","",2,[[["self"]],["client"]]],[11,"clone","db::schema::clients","",6,[[["self"]],["table"]]],[11,"clone","db::schema::clients::columns","",7,[[["self"]],["star"]]],[11,"clone","","",8,[[["self"]],["uid"]]],[11,"clone","","",9,[[["self"]],["ip"]]],[11,"clone","","",10,[[["self"]],["port"]]],[11,"default","","",8,[[],["uid"]]],[11,"default","","",9,[[],["ip"]]],[11,"default","","",10,[[],["port"]]],[11,"fmt","db::clients","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","db::schema::clients","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","db::schema::clients::columns","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"div","","",8,[[["rhs"]]]],[11,"div","","",10,[[["rhs"]]]],[11,"sub","","",8,[[["rhs"]]]],[11,"sub","","",10,[[["rhs"]]]],[11,"add","","",8,[[["rhs"]]]],[11,"add","","",10,[[["rhs"]]]],[11,"mul","","",8,[[["rhs"]]]],[11,"mul","","",10,[[["rhs"]]]],[11,"table","db::schema::clients","",6,[[]]],[11,"build","db::clients","",2,[[],["self"]]],[11,"eq_all","db::schema::clients::columns","",8,[[["t"]]]],[11,"eq_all","","",9,[[["t"]]]],[11,"eq_all","","",10,[[["t"]]]],[11,"values","db::clients","",2,[[]]],[11,"values","db::schema::clients","",6,[[]]],[11,"join_target","","",6,[[["join"]]]],[11,"join_target","","",6,[[["joinon"]]]],[11,"join_target","","",6,[[["selectstatement"]]]],[11,"join_target","","",6,[[["boxedselectstatement"]]]],[11,"from_clause","","",6,[[["self"]]]],[11,"default_selection","","",6,[[["self"]]]],[11,"primary_key","","",6,[[["self"]]]],[11,"all_columns","","",6,[[]]],[11,"into_update_target","","",6,[[],["updatetarget"]]],[11,"walk_ast","db::schema::clients::columns","",7,[[["astpass"],["self"]],["queryresult"]]],[11,"walk_ast","","",8,[[["self"],["astpass"]],["queryresult"]]],[11,"walk_ast","","",9,[[["self"],["astpass"]],["queryresult"]]],[11,"walk_ast","","",10,[[["self"],["astpass"]],["queryresult"]]],[11,"as_query","db::schema::clients","",6,[[]]],[11,"as_changeset","db::clients","",2,[[]]],[11,"serialize","","",2,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",2,[[["__d"]],["result"]]]],"p":[[3,"DatabaseHandler"],[3,"Cache"],[3,"Client"],[3,"ClientHashMap"],[3,"ClientVector"],[3,"ClientHandler"],[3,"table"],[3,"star"],[3,"uid"],[3,"ip"],[3,"port"]]};
searchIndex["muoxi_benchmarks"] = {"doc":"","i":[[5,"main","muoxi_benchmarks","",null,[[],[["result",["box"]],["box",["error"]]]]],[0,"io","","",null,null],[3,"Person","muoxi_benchmarks::io","",null,null],[12,"id","","",0,null],[12,"name","","",0,null],[12,"email","","",0,null],[12,"hp","","",0,null],[12,"mana","","",0,null],[12,"vit","","",0,null],[5,"benchmark_io_json_100_000","","",null,[[],[["result",["box"]],["box",["error"]]]]],[17,"_IMPL_SERIALIZE_FOR_Person","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Person","","",null,null],[0,"report","muoxi_benchmarks","",null,null],[3,"ReportBuilder","muoxi_benchmarks::report","",null,null],[12,"title","","",1,null],[12,"body","","",1,null],[12,"footnotes","","",1,null],[3,"Report","","",null,null],[12,"title","","",2,null],[12,"body","","",2,null],[12,"footnotes","","",2,null],[11,"write_report","","",2,[[["str"],["self"]],["result"]]],[11,"present","","",2,[[["self"]],["string"]]],[11,"new","","",1,[[],["self"]]],[11,"with_title","","",1,[[["self"],["str"]],["self"]]],[11,"with_body","","",1,[[["self"],["str"]],["self"]]],[11,"with_footnotes","","",1,[[["self"],["str"]],["self"]]],[11,"build_report","","",1,[[["self"]],["report"]]],[11,"from","muoxi_benchmarks::io","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","muoxi_benchmarks::report","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"clone","muoxi_benchmarks::io","",0,[[["self"]],["person"]]],[11,"clone","muoxi_benchmarks::report","",1,[[["self"]],["reportbuilder"]]],[11,"fmt","muoxi_benchmarks::io","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","muoxi_benchmarks::report","",1,[[["self"],["formatter"]],["result"]]],[11,"deserialize","muoxi_benchmarks::io","",0,[[["__d"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]]],"p":[[3,"Person"],[3,"ReportBuilder"],[3,"Report"]]};
searchIndex["muoxi_engine"]={"doc":"The main MuOxi Game server. This is where all the game…","i":[],"p":[]};
searchIndex["muoxi_sandbox"] = {"doc":"","i":[[3,"Person","muoxi_sandbox","",null,null],[12,"uid","","",0,null],[12,"name","","",0,null],[12,"age","","",0,null],[12,"email","","",0,null],[5,"main","","",null,[[],[["result",["box"]],["box",["error"]]]]],[17,"_IMPL_SERIALIZE_FOR_Person","","",null,null],[17,"_IMPL_DESERIALIZE_FOR_Person","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"clone","","",0,[[["self"]],["person"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]]],"p":[[3,"Person"]]};
searchIndex["muoxi_staging"] = {"doc":"Main Proxy Staging TCP Server","i":[[5,"send","muoxi_staging","Friendly async wrapper to sending messages to client object",null,[[["client"],["str"]]]],[5,"get","","Friendly async wrapper around recieving message from…",null,[[["client"]]]],[5,"process","","Main processing piece of logic, once a connection is…",null,[[["arc",["mutex"]],["tcpstream"],["mutex",["server"]]]]],[5,"transfer","","Turns the staging server into a full proxy server,…",null,[[["string"],["tcpstream"]]]],[5,"main","","",null,[[],[["result",["box"]],["box",["error"]]]]],[0,"comms","","Definitions and declarations of data structures relating…",null,null],[3,"ClientAccount","muoxi_staging::comms","struct holding client account information",null,null],[12,"name","","name of client account",0,null],[12,"ncharacters","","number of characters associated with account",0,null],[3,"Client","","Wrapper around connected socket, this is non-persistent…",null,null],[12,"uid","","unique id for client",1,null],[12,"state","","current state of connected client",1,null],[12,"lines","","encodes and decodes incoming streams",1,null],[12,"addr","","socket address of connected client",1,null],[12,"rx","","",1,null],[3,"Comms","","Server owned structure that holds each clients SocketAddr…",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"Server","","Shared ownership structure between all connected clients.",null,null],[12,"clients","","Holds information regarding connected clients",3,null],[12,"accounts","","Holds account information for each client",3,null],[4,"Message","","The types of message recieved",null,null],[13,"FromClient","","Message recieved from connected client",4,null],[13,"OnRx","","Message recieved from shared Rx",4,null],[6,"Tx","","alias for sending channel",null,null],[6,"Rx","","alias for recieving channel",null,null],[11,"new","","creates new instance of account",0,[[["string"]],["self"]]],[11,"new","","asyncronously create a new client instance this instance…",1,[[["arc",["mutex"]],["mutex",["server"]],["tcpstream"],["uid"]]]],[11,"new","","creates shared struct between clients and actual server",3,[[],["self"]]],[11,"broadcast","","helper function that broadcasts data to all connected…",3,[[["socketaddr"],["str"],["self"]]]],[0,"copyover","muoxi_staging","A custom reimplementation of tokio::io::copy",null,null],[3,"CopyOver","muoxi_staging::copyover","Asynchronously copies the entire contents of a reader into…",null,null],[12,"reader","","",5,null],[12,"read_done","","",5,null],[12,"writer","","",5,null],[12,"pos","","",5,null],[12,"cap","","",5,null],[12,"amt","","",5,null],[12,"buf","","",5,null],[12,"to","","",5,null],[12,"from","","",5,null],[5,"copy","","do the actual async copy from read to write",null,[[["socketaddr"],["w"],["r"]],[["copyover"],["sized"]]]],[7,"GAME_ADDR","muoxi_staging","Current listening port of the MuOxi game engine",null,null],[7,"PROXY_ADDR","","Current listening port of the staging proxy server",null,null],[11,"from","muoxi_staging::comms","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"try_poll_next","","",1,[[["pin"],["s"],["context"]],[["option",["result"]],["poll",["option"]]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","muoxi_staging::copyover","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"try_poll","","",5,[[["f"],["context"],["pin"]],["poll"]]],[11,"fmt","muoxi_staging::comms","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","muoxi_staging::copyover","",5,[[["self"],["formatter"]],["result"]]],[11,"poll","","",5,[[["context"],["self"],["pin"]],[["result",["u64"]],["poll",["result"]]]]],[11,"poll_next","muoxi_staging::comms","",1,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]]],"p":[[3,"ClientAccount"],[3,"Client"],[3,"Comms"],[3,"Server"],[4,"Message"],[3,"CopyOver"]]};
searchIndex["muoxi_watchdog"]={"doc":"WatchDog that monitors the custom defined `.json` files…","i":[[4,R[65],"muoxi_watchdog","Different `.json` storage files that need to be monitored",N,N],[13,"Accounts",E,"holds account information ex: number of characters of…",0,N],[13,"Players",E,"holds all character information",0,N],[13,R[85],E,"holds raw socket representation of connected clients",0,N],[5,"read_file",E,"simple wrapper to read from json file and return…",N,[[["str"]],[[R[0],["value"]],["value"]]]],[5,"trigger_upload",E,"main function that triggers upload protocols for each…",N,[[[R[64]]],[[R[0],["box"]],["box",["error"]]]]],[7,"CLIENTS",E,E,N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[5],E,E,0,[[["self"],[T]]]],[11,R[7],E,E,0,[[[U]],[R[0]]]],[11,R[8],E,E,0,[[],[R[0]]]],[11,R[9],E,E,0,[[["self"]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[["self"]],[R[32]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"clone",E,E,0,[[["self"]],[R[64]]]],[11,"fmt",E,E,0,[[["self"],[R[12]]],[R[0]]]]],"p":[[4,R[65]]]};
searchIndex["muoxi_web"] = {"doc":"Handles all things related to WebSocketServer Like finding…","i":[[3,"HTML","muoxi_web","",null,null],[3,"ClientData","","",null,null],[12,"ip","","",0,null],[12,"token","","",0,null],[12,"in_buf","","",0,null],[12,"out_buf","","",0,null],[3,"Clients","","",null,null],[12,"client_list","","",1,null],[3,"WebSocketServer","","",null,null],[12,"out","","",2,null],[12,"clients","","",2,null],[3,"InternalTcpClient","","",null,null],[12,"clients","","",3,null],[12,"stream","","",3,null],[5,"main","","",null,[[]]],[6,"IpAddr","","",null,null],[11,"get_index","","",4,[[],[["result",["vec"]],["vec",["u8"]]]]],[11,"new","","",0,[[["token"],["string"]],["self"]]],[11,"new","","",1,[[],["self"]]],[11,"insert","","",1,[[["self"],["sender"],["string"]],["result"]]],[11,"remove","","",1,[[["sender"],["self"]],[["option",["clientdata"]],["clientdata"]]]],[11,"new","","",2,[[["arc",["mutex"]],["mutex",["clients"]],["sender"]],["self"]]],[11,"new","","",3,[[["arc",["mutex"]],["mutex",["clients"]],["tcpstream"]],["self"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"on_message","","",2,[[["message"],["self"]],[["result",["error"]],["error"]]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"clone","","",0,[[["self"]],["clientdata"]]],[11,"clone","","",1,[[["self"]],["clients"]]],[11,"assert_receiver_is_total_eq","","",0,[[["self"]]]],[11,"eq","","",0,[[["clientdata"],["self"]],["bool"]]],[11,"ne","","",0,[[["clientdata"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"on_message","","",2,[[["self"],["message"]],["result"]]],[11,"on_open","","",2,[[["self"],["handshake"]],["result"]]],[11,"on_request","","",2,[[["self"],["request"]],[["response"],["result",["response"]]]]],[11,"on_close","","",2,[[["str"],["self"],["closecode"]]]]],"p":[[3,"ClientData"],[3,"Clients"],[3,"WebSocketServer"],[3,"InternalTcpClient"],[3,"HTML"]]};
searchIndex["states"] = {"doc":"","i":[[4,"ConnStates","states","",null,null],[13,"AwaitingName","","",0,null],[13,"AwaitingPassword","","",0,null],[13,"AwaitingNewName","","",0,null],[13,"AwaitingNewPassword","","",0,null],[13,"ConfirmNewPassword","","",0,null],[13,"MainMenu","","",0,null],[13,"Playing","","",0,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["connstates"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]]],"p":[[4,"ConnStates"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);